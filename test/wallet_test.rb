require "test_helper"

class WalletTest < Minitest::Test
  # addresses `ckt1qyqvsv5240xeh85wvnau2eky8pwrhh4jr8ts8vyj37` / `ckt1qyqywrwdchjyqeysjegpzw38fvandtktdhrs0zaxl4`
  # and corresponding private keys are copied from dev chain genesis block's issued_cells:
  # https://github.com/nervosnetwork/ckb/blob/develop/resource/specs/dev.toml#L70
  #
  # addresses `ckt1qyqr8ljpvy6y7t0cp2m0prv2whvm05whjzeqaydfze` / `ckt1qyq0myesdwxwntsra2m75xtp8k7q8nphjmksxyzz0c`
  # and corresponding private keys are randomly generated by ckb-cli:
  # `0x92116fee8735bd5d95f5f0e773a887f1a7d0b3d0c6007c8a66f844acffb9adc0` / `0x252948dddb55a54c93bf05c468acbaa6683c763c39132e71fd8ecb9fb6f88f5d`
  #
  # `ckt1qyqkqqppzt0svxzyedfe7jt0dhxhd9rvt2dskqrjem` is a multisig address generated by
  # ./ckb-cli tx build-multisig-address --sighash-address ckt1qyqvsv5240xeh85wvnau2eky8pwrhh4jr8ts8vyj37 --sighash-address ckt1qyqywrwdchjyqeysjegpzw38fvandtktdhrs0zaxl4 --sighash-address ckt1qyqr8ljpvy6y7t0cp2m0prv2whvm05whjzeqaydfze --threshold 2

  def test_gen_tx_by_default_scanner
    wallet = CKB::Wallets::Simple.new("ckt1qyqvsv5240xeh85wvnau2eky8pwrhh4jr8ts8vyj37")
    # build tx to transfer 421 ckb to a multisig address
    tx_builder = wallet.build("ckt1qyqkqqppzt0svxzyedfe7jt0dhxhd9rvt2dskqrjem", 421_0000_0000)
    # sign with from address's private key
    tx = wallet.sign(tx_builder, "0xd00c06bfd800d27397002dca6fb0993d5ba6399b4238b2f29ee9deb97593d2bc".from_hex)

    rpc = CKB::Config.instance.rpc
    rpc.send_transaction(tx.as_json)
  end

  # enable `Indexer` module in ckb.toml `rpc` section
  # and index with lock hash by rpc first:
  # CKB::Config.instance.rpc.index_lock_hash("0xc219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd", 0)
  def test_gen_tx_by_default_indexer
    wallet = CKB::Wallets::Simple.new("ckt1qyqywrwdchjyqeysjegpzw38fvandtktdhrs0zaxl4", :default_indexer)
    # build tx to transfer 1024 ckb to a multisig address
    tx_builder = wallet.build("ckt1qyqkqqppzt0svxzyedfe7jt0dhxhd9rvt2dskqrjem", 1024_0000_0000)
    # sign with from address's private key
    tx = wallet.sign(tx_builder, "0x63d86723e08f0f813a36ce6aa123bb2289d90680ae1e99d4de8cdb334553f24d".from_hex)

    rpc = CKB::Config.instance.rpc
    rpc.send_transaction(tx.as_json)
  end

  def test_gen_multisig_tx
    wallet = CKB::Wallets::Simple.new("ckt1qyqkqqppzt0svxzyedfe7jt0dhxhd9rvt2dskqrjem")
    # build tx to transfer 124 ckb from a 2 / 3 multisig script address
    tx_builder = wallet.build("ckt1qyqywrwdchjyqeysjegpzw38fvandtktdhrs0zaxl4", 124_0000_0000, {context: [0, 0, 2, 3, "0xc8328aabcd9b9e8e64fbc566c4385c3bdeb219d7".from_hex, "0x470dcdc5e44064909650113a274b3b36aecb6dc7".from_hex, "0x33fe4161344f2df80ab6f08d8a75d9b7d1d790b2".from_hex]})
    # sign with two private keys
    # equivalent to `tx = wallet.advance_sign(tx_builder, [private_key1, private_key2])`
    wallet.sign(tx_builder, ["0xd00c06bfd800d27397002dca6fb0993d5ba6399b4238b2f29ee9deb97593d2bc".from_hex])
    tx = wallet.sign(tx_builder, ["0x92116fee8735bd5d95f5f0e773a887f1a7d0b3d0c6007c8a66f844acffb9adc0".from_hex])
    rpc = CKB::Config.instance.rpc
    rpc.send_transaction(tx.as_json)
  end

  def test_advance_build
    wallet = CKB::Wallets::Simple.new("ckt1qyqvsv5240xeh85wvnau2eky8pwrhh4jr8ts8vyj37")
    # build tx to transfer 1234 and 4321 ckb to two addresses
    tx_builder = wallet.advance_build(
      "ckt1qyqr8ljpvy6y7t0cp2m0prv2whvm05whjzeqaydfze" => {capacity: 1234_0000_0000},
      "ckt1qyq0myesdwxwntsra2m75xtp8k7q8nphjmksxyzz0c" => {capacity: 4321_0000_0000},
    )
    # sign with from address's private key
    tx = wallet.sign(tx_builder, "0xd00c06bfd800d27397002dca6fb0993d5ba6399b4238b2f29ee9deb97593d2bc".from_hex)

    rpc = CKB::Config.instance.rpc
    rpc.send_transaction(tx.as_json)
  end

  def test_advance_sign
    wallet = CKB::Wallets::Simple.new(["ckt1qyqr8ljpvy6y7t0cp2m0prv2whvm05whjzeqaydfze", "ckt1qyq0myesdwxwntsra2m75xtp8k7q8nphjmksxyzz0c"])
    tx_builder = wallet.build("ckt1qyqkqqppzt0svxzyedfe7jt0dhxhd9rvt2dskqrjem", 5000_0000_0000)
    # equivalent to `tx = wallet.advance_sign(tx_builder, [private_key1, private_key2])`
    wallet.advance_sign(tx_builder, ["0x92116fee8735bd5d95f5f0e773a887f1a7d0b3d0c6007c8a66f844acffb9adc0".from_hex, nil])
    tx = wallet.advance_sign(tx_builder, [nil, "0x252948dddb55a54c93bf05c468acbaa6683c763c39132e71fd8ecb9fb6f88f5d".from_hex])

    rpc = CKB::Config.instance.rpc
    rpc.send_transaction(tx.as_json)
  end

  def test_deploy_contract_with_type_id
    wallet = CKB::Wallets::Simple.new("ckt1qyqvsv5240xeh85wvnau2eky8pwrhh4jr8ts8vyj37")
    data = File.read(File.expand_path("fixtures/always_success", File.dirname(__FILE__))).unpack("C*")
    type_script = CKB::Types::Script.new(
      code_hash: CKB::Types::Script::TYPE_ID_HASH,
      args: CKB::Types::Bytes.new(Array.new(32, 0)),
      hash_type: CKB::Types::Script::HASH_TYPE_TYPE
    )
    tx_builder = wallet.build("ckt1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqparrr6", 500_0000_0000, {data: data, type: type_script})
    tx = wallet.sign(tx_builder, "0xd00c06bfd800d27397002dca6fb0993d5ba6399b4238b2f29ee9deb97593d2bc".from_hex)

    rpc = CKB::Config.instance.rpc
    rpc.send_transaction(tx.as_json)
  end
end
